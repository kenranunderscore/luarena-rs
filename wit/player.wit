package luarena:character;

interface handlers {
    enum movement-direction {
        forward,
        backward,
        left,
        right,
    }

    record movement {
        direction: movement-direction,
        distance: f32,
    }

    variant command {
        move(movement),
        attack,
        turn(f32),
        turn-head(f32),
        turn-arms(f32),
    }

    record point {
        x: f32,
        y: f32,
    }

    record character-state {
        x: f32,
        y: f32,
        hp: f32,
        heading: f32,
        head-heading: f32,
        arms-heading: f32,
        attack-cooldown: u8,
        turn-remaining: f32,
        head-turn-remaining: f32,
        arms-turn-remaining: f32,
    }

    on-round-started: func(round: u32) -> list<command>;
    on-round-ended: func(opt-winner: option<string>);
    on-round-won: func();
    on-round-drawn: func();
    on-tick: func(tick: u32, current-state: character-state) -> list<command>;
    on-enemy-seen: func(enemy: string, p: point) -> list<command>;
    on-hit-by: func(enemy: string) -> list<command>;
    on-attack-hit: func(enemy: string, p: point) -> list<command>;
    on-enemy-died: func(enemy: string) -> list<command>;
    on-death: func();
}

world character {
    import log: func(msg: string);
    export handlers;
}
